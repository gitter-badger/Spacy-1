language: c++

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.6
    - llvm-toolchain-precise-3.7
    - llvm-toolchain-precise-3.8
    packages:
    - build-essential
    - g++-5
    - gcc-5
    - g++-6
    - gcc-6


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.6.2
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.7.1
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.8.0


env:
  # Workaround for https://github.com/travis-ci/travis-ci/issues/4681
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true
  
matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true
  include:
    # LINUX
    # GCC 5
    - os: linux
      env: COMPILER=g++-5 CCOMPILER=gcc-5 COMPUTE_COVERAGE=false
      compiler: gcc

    # GCC 6
    - os: linux
      env: COMPILER=g++-6 CCOMPILER=gcc-6 GCOV=/usr/bin/gcov-6 COMPUTE_COVERAGE=true
      compiler: gcc
      
    # Clang 3.6
    - os: linux
      env: COMPILER=clang++-3.6 CCOMPILER=clang-3.6 COMPUTE_COVERAGE=false LLVM_VERSION=3.6.2
      compiler: clang
      
    # Clang 3.7
    - os: linux
      env: COMPILER=clang++-3.7 CCOMPILER=clang-3.7 COMPUTE_COVERAGE=false LLVM_VERSION=3.7.1
      compiler: clang
      
    # Clang 3.8
    - os: linux
      env: COMPILER=clang++-3.8 CCOMPILER=clang-3.8 COMPUTE_COVERAGE=false LLVM_VERSION=3.8.0
      compiler: clang
     
before_install:
  ############################################################################
  # Install Clang, libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
        mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
        (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
      fi
      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
  - export CXX=${COMPILER}
  - export CC=${CCOMPILER}

install:
  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.5/cmake-3.5.2.tar.gz"
      travis_retry wget --no-check-certificate --quiet ${CMAKE_URL}
      tar xf cmake-3.5.2.tar.gz
      cd cmake-3.5.2 && ./configure && make && sudo make install
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi

    
  ############################################################################
  # Install lcov
  ############################################################################
  - |
    if [[ "${COMPUTE_COVERAGE}" == "true" ]]; then
      sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu/ trusty main restricted" -y
      sudo apt-get update -qq
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz
      tar xf lcov_1.11.orig.tar.gz
      sudo make -C lcov-1.11/ install
      # install lcov to coveralls conversion + upload tool
      gem install coveralls-lcov
    fi

  ############################################################################
  # Install gtest
  ############################################################################
  - |
    git clone https://github.com/google/googletest.git
    cd googletest && mkdir build && cd build && cmake .. && make
    sudo cp -r ../googletest/include/gtest /usr/local/include/
    sudo cp googlemock/gtest/lib*.a /usr/local/lib

script:
  - cd $TRAVIS_BUILD_DIR
  - mkdir build && cd build
  - |
    if [[ "${COMPUTE_COVERAGE}" == "true" ]]; then
      cmake -DBuildTest=ON -DCoverage=ON .. && make
      lcov --gcov-tool ${GCOV} --capture --initial --no-external --directory . --base-directory ../Spacy --output-file initial.info --rc lcov_branch_coverage=1
    else
      cmake -DBuildTest=ON .. && make
    fi
  - Test/unit_tests
  - |
    if [[ "${COMPUTE_COVERAGE}" == "true" ]]; then
      lcov --gcov-tool ${GCOV} --capture --no-external --directory . --base-directory ../Spacy --output-file final.info --rc lcov_branch_coverage=1
      lcov --gcov-tool ${GCOV} --add-tracefile initial.info --add-tracefile final.info --output-file coverage.info --rc lcov_branch_coverage=1
    fi
  - cd ..
after_success:
  - |
    if [[ ${COMPUTE_COVERAGE}" == "true" ]]; then
      cd build
      sed 's@/home/travis/build/spacy-dev/Spacy/@/@g' coverage.info
      coveralls-lcov --repo-token XQlVreS1r1o5V7qn14UiqF3W3kZiy7TUM coverage.info
    fi
