# Compile this form with FFC: ffc -l dolfin NormalStepFunctional.ufl

Y = FiniteElement("Lagrange", triangle, 1)
U = FiniteElement("Lagrange", triangle, 1)
P = FiniteElement("Lagrange", triangle, 1)

X = MixedElement( Y , U , P )

x = Coefficient(X)
(y,u,p) = split(x)

alpha = Constant(triangle)
c = Constant(triangle)
d = Constant(triangle)

(vy,vu,vp) = TestFunctions(X)
(wy,wu,wp) = TrialFunctions(X)

H = (c+d*y**2)*inner(grad(vy),grad(wy))*dx + vy*wy*dx + alpha*vu*wu*dx - vu*wp*dx - vp*wu*dx + 1e9*vy*wp*ds + 1e9*vp*wy*ds + inner((c+d*y**2)*grad(vy),grad(wp))*dx + inner((c+d*y**2)*grad(vp),grad(wy))*dx + inner((2*d*y*vy)*grad(y),grad(wp))*dx + inner((2*d*y*wy)*grad(y),grad(vp))*dx

forms = [H]

