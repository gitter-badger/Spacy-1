#error Documentation only.

/** MODULES **/

/**
 * @defgroup SpacyGroup Spacy
 */

/**
 * @defgroup VectorSpaceGroup Vector Spaces
 *
 * @brief Collection of available vector spaces.
 *
 * Contains models for one-dimensional and product spaces as well as vector spaces for FEnics and Kaskade 7.
 */

  /**
    * @defgroup RealGroup Real Space
    * @ingroup VectorSpaceGroup
    * @brief A one dimensional vector space representing the space of real numbers.
    */

  /**
    * @defgroup ProductSpaceGroup Product Space
    * @ingroup VectorSpaceGroup
    * @brief A product space that supports distinction between primal and dual variables.
    */

  /**
    * @defgroup FenicsGroup Vector Space for FEniCS
    * @ingroup VectorSpaceGroup
    * @brief Vector spaces, functionals and operators for <a href="http://www.fenicsproject.org">FEniCS</a>.
    */

    
  /**
    * @defgroup KaskadeGroup Vector Space for Kaskade 7
    * @ingroup VectorSpaceGroup
    * @brief Vector spaces, functionals and operators for <a href="http://www.zib.de/projects/kaskade7-finite-element-toolbox">Kaskade 7</a>.
    */
     
  /**
   * @defgroup GenericGroup Generic Implementations for Vector Space Implementations.
   * @ingroup VectorSpaceGroup
   */

  /**
   * @defgroup ScalarGroup Operators, Functionals and Solvers for Scalar Problems
   * @ingroup VectorSpaceGroup
   */
   
  /**
   * @defgroup RnGroup Operators, Functionals and Solvers for Finite Dimensional Problems
   * @ingroup VectorSpaceGroup
   * @brief Vector spaces, functionals and operators based on <a href="http://eigen.tuxfamily.org">Eigen</a>.
   */

   
/**
 * @defgroup MixinGroup Mixins
 * @brief Components that are frequently used and can be added to your classes via (multiple) inheritance.
 *
 * Among the mixin components are 
 * - components for different accuracy requirements (Mixin::RelativeAccuracy, Mixin::AbsoluteAccuracy, Mixin::MinimalAccuracy, Mixin::DampingAccuracy)
 * - a component for the maximal attainable accuracy (Mixin::Eps)
 * - a component for the maximal number of steps/iterations (Mixin::MaxSteps)
 * - components for elementary algorithmic decisions (Mixin::ContractionRate, Mixin::DecreaseCondition, Mixin::RegularityTest)
 * - indices for variables in optimization and optimal control problems
 * ...
 */

/**
 * @defgroup ExceptionGroup Exceptions
 * @brief Some simple exceptions.
 * @todo improve
 */

/**
 * @defgroup AlgorithmGroup Algorithms
 * @brief Contains different algorithms that can be formulated in vector spaces.
 * @see NewtonGroup, CGGroup, CSGroup
 *
 * Contains different variants of conjugate gradient methods for convex and nonconvex problems, different newton methods and an affine covariant composite step method.
 */
 
  /**
   * @defgroup NewtonGroup Newton Methods
   * @ingroup AlgorithmGroup
   * @brief %Newton methods, largely following @cite Deuflhard2004.
   *
   * Contains a local %Newton method, an affine covariant %Newton method, an affine contravariant %Newton method as well as a generic implementation that admits the implementation of further termination 
   * criteria and damping strategies.
   */
 
  /**
   * @defgroup CGGroup Conjugate Gradient Methods
   * @ingroup AlgorithmGroup
   * @brief Conjugate gradient methods for convex and nonconvex problems (%CG, Truncated %CG, Regularized %CG and Truncated Regularized %CG).
   */ 

  /**
   * @defgroup CSGroup Composite Step Methods
   * @ingroup AlgorithmGroup
   * @brief Contains the affine covariant composite step method of \cite Lubkoll2015, \cite Lubkoll2015a.
   */ 
  
/**
 * @defgroup ConceptGroup Concepts
 * @brief %Concepts for vectors, functional, operators, ...
 * 
 * The concepts are employed with Boost.TypeErasure, i.e. VectorConcept yields the type boost::type_erasure::any<VectorConcept>.
 */
 
  /**
   * @defgroup NewtonConceptGroup Concepts for Newton's method
   * @ingroup ConceptGroup
   * @brief %Concepts for damping strategy and termination criteria for %Newton's method.
   */
   
  /**
   * @defgroup CGConceptGroup Concepts for conjugate gradient methods
   * @ingroup ConceptGroup
   * @brief Concept for termination criteria for conjugate gradient methods.
   */

   
  
  
/** NAMESPACES **/
   
  /**
   * \namespace Spacy
   * \brief Main namespace of the %Spacy library.
   */
 
 
 
   /**
   * @namespace Spacy::CG
   * @ingroup CGGroup
   * @brief Conjugate gradient methods for convex and nonconvex problems (%CG, Truncated %CG, Regularized %CG and Truncated Regularized %CG).
   * @see CGGroup, CGConceptGroup
   */ 
     
    /**
     * @namespace Spacy::CG::Termination
     * @brief Termination criteria for conjugate gradient methods.
     * @see CGGroup, CGConceptGroup
     */
  
  /**
   * @namespace Spacy::Newton
   * @brief %Newton methods, largely following @cite Deuflhard2004.
   *
   * Contains a local %Newton method, an affine covariant %Newton method, an affine contravariant %Newton method as well as a generic implementation that admits the implementation of further termination 
   * criteria and damping strategies.
   * @see NewtonGroup, NewtonConceptGroup
   */
     
    /**
     * @namespace Spacy::Newton::Damping
     * @brief Damping strategies for Newton's method.
     * @see NewtonGroup, NewtonConceptGroup
     */
     
    /**
     * @namespace Spacy::Newton::Termination
     * @brief Termination criteria for Newton's method.
     * @see NewtonGroup, NewtonConceptGroup
     */
       
  /**
   * @namespace Spacy::Concepts::CompositeStep
   * @brief Contains the affine covariant composite step method of \cite Lubkoll2015, \cite Lubkoll2015a.
   * @see CSGroup
   */
     

  /**
   * @namespace Spacy::ProductSpace
   * @brief  A product space that supports distinction between primal and dual variables.
   * @see ProductSpaceGroup
   */
   
  /**
   * @namespace Spacy::FEniCS
   * @brief Contains vector spaces, functionals and operators for <a href="www.fenicsproject.org">FEniCS</a>.
   * @see FenicsGroup
   */
   
  /**
   * @namespace Spacy::Kaskade
   * @brief Contains vector spaces, functionals and operators for <a href="http://www.zib.de/projects/kaskade7-finite-element-toolbox">Kaskade 7</a>.
   * @see KaskadeGroup
   */
   
  /**
   * @namespace Spacy::Scalar
   * @brief Contains functionals and operators for scalar problems.
   * @see ScalarGroup
   */
   
  /**
   * @namespace Spacy::Rn
   * @brief Contains functionals and operators for finite dimensional vector space problems.
   * @see RnGroup
   */
   
  /**
   * @namespace Spacy::Generic
   * @brief Contains generic implementations for easier definitions of vectors and a generic scalar product implementation.
   * @see GenericGroup, VectorBase, AddArithmeticOperators, OperatorBase, FunctionalBase
   */
   
   
   
  /**
   * @namespace Spacy::Mixin
   * @brief Contains components that are frequently used and can be added to your classes via (multiple) inheritance.
   * @see MixinGroup
   */
   
   
   
  /**
   * @namespace Spacy::Concepts
   * @brief %Concepts for vectors, functional, operators, ...
   * @see ConceptGroup
   */
   
    /**
     * @namespace Spacy::Concepts::Newton
     * @brief %Concepts for damping strategy and termination criteria for %Newton's method.
     * @see NewtonConceptGroup
     */
     
    /**
     * @namespace Spacy::Concepts::CG
     * @brief Concept for termination criteria for conjugate gradient methods.
     * @see CGConceptGroup
     */
